#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass amsart
\use_default_options false
\begin_modules
theorems-ams
eqs-within-sections
figs-within-sections
theorems-ams-extended
linguistics
\end_modules
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding default
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\float_placement tph
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 0
\use_esint 0
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 2
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Peroformance evaluation
\end_layout

\begin_layout Date
27.8.2012
\end_layout

\begin_layout Address
no address 
\begin_inset Newline newline
\end_inset

somewhere 
\begin_inset Newline newline
\end_inset

somewhere ZIPno address 
\begin_inset Newline newline
\end_inset

somewhere 
\begin_inset Newline newline
\end_inset

somewhere ZIP
\end_layout

\begin_layout Current Address
Home
\end_layout

\begin_layout Email
erdmann-berlin@t-online.de
\end_layout

\begin_layout Current Address
Home
\end_layout

\begin_layout Email
erdmann-berlin@t-online.de
\end_layout

\begin_layout URL
http://michaelerdmann-berlin.de/
\end_layout

\begin_layout Keywords
Task Synchronization
\end_layout

\begin_layout Abstract
to be completes
\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Standard
In order to calculate the movement of a system of 
\begin_inset Formula $N$
\end_inset

 non relativistic bodies, the Newtonian equations of movement have to be
 solved for every particle 
\begin_inset Formula $i$
\end_inset

 as a result of the interaction with all other particles in the system:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
m_{i}\frac{dv_{i}}{dt}\mid_{x(t)}=\sum_{j=1}^{N}F(x_{i}(t),x_{j}(t))\label{eq:newton}
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
\frac{dx}{dt}=v
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
where 
\begin_inset Formula $m_{i}$
\end_inset

is the mass, 
\begin_inset Formula $v_{i}$
\end_inset

 is the velocity and 
\begin_inset Formula $F$
\end_inset

 the force between two bodies 
\begin_inset Formula $i$
\end_inset

 and 
\begin_inset Formula $j$
\end_inset

 for some given initial conditions 
\begin_inset Formula $v(0)=v_{0}$
\end_inset

 and 
\begin_inset Formula $x(0)=x_{0}$
\end_inset

.
 Basically this means the change of the movement for a given particle 
\begin_inset Formula $i$
\end_inset

 is given by the sum of all forces 
\begin_inset Formula $F$
\end_inset

 between the body 
\begin_inset Formula $i$
\end_inset

 and all other bodies.
\end_layout

\begin_layout Section
Numerical Integration of newtonion trajectories
\end_layout

\begin_layout Standard
The equation 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:newton"

\end_inset

 can be solved numerically using the Euler method, which means for an given
 initial condition 
\begin_inset Formula $v(0)=v_{0}$
\end_inset

 and 
\begin_inset Formula $x(0)=x_{0}$
\end_inset

 the following iteration is used:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
F_{i}=\sum_{j=1}^{N}F(x_{i},x_{j})\label{eq:forces}
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
v_{i}(t+\Delta t)\simeq v_{i}(t)+\frac{1}{m_{i}}F_{i}\triangle t\label{eq:eulerv}
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
x_{i}(t+\Delta t)\simeq x_{i}(t)+v_{i}(t)\triangle t+\frac{1}{2m_{i}}F_{i}(x_{t})\triangle t^{2}\label{eq:eulerx}
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
where the last term is a correction term which derived from the Taylor series
 (see 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:taylor"

\end_inset

).
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
x(t+\triangle x)=x(t)+\frac{dx}{dt}\triangle t+\frac{1}{2}\cdot\frac{d^{2}x}{dt^{2}}\triangle t^{2}+Rest\label{eq:taylor}
\end{equation}

\end_inset


\end_layout

\begin_layout Section
Computation Time OF the Integration Process
\end_layout

\begin_layout Standard
The computation time 
\begin_inset Formula $T$
\end_inset

 for the integration of 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:newton"

\end_inset

depends on two contributions.
 First on the number of particles 
\begin_inset Formula $N$
\end_inset

 in a quadratic way since equation 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:forces"

\end_inset

 has to be calculated for each particle and secondly on the calculation
 time needed to compute the movement (equation 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:eulerx"

\end_inset

).
 The directly depends on the number of particles.
 This mean the execution time of a single integration step can be calculated
 using the following formula.
 
\begin_inset Formula 
\begin{equation}
T(N)=\alpha N^{2}+\beta N\label{eq:perform}
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
By taking measurements with different N values it is possible to derive
 the 
\begin_inset Formula $\alpha$
\end_inset

 and 
\begin_inset Formula $\beta$
\end_inset

 values of equation 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:perform"

\end_inset

.
 The result is shown in figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:performance"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename perf.png
	scale 70

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
This figure shows the estimation of the computation time according to 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:perform"

\end_inset

 in comparison with actual measurements taken using an 1.8Ghz Xeon processor
 running linux.
 The solid line shows the estimation for 
\begin_inset Formula $\alpha=0.0038177886s$
\end_inset

 and 
\begin_inset Formula $\beta=0.0001589616s$
\end_inset

.
 
\begin_inset CommandInset label
LatexCommand label
name "fig:performance"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Parallisation of the Integration
\end_layout

\begin_layout Standard
Generally speaking the integration process for 
\begin_inset Formula $n$
\end_inset

 particles can be written in the form of an iteration, where 
\begin_inset Formula $s_{i}=<x_{i},p_{i}>$
\end_inset

is the state 
\begin_inset Foot
status open

\begin_layout Plain Layout
Actually this is not the particle state in the sense of the Newtonian physics,
 but in the sense of the integration algorithm.
\end_layout

\end_inset

 of an individual particle 
\begin_inset Formula $i$
\end_inset

.
 All particle states together form a state vector.
 The new state vector 
\begin_inset Formula $s'$
\end_inset

 can be calculated from the original one 
\begin_inset Formula $s$
\end_inset

 by applying a function 
\begin_inset Formula $I$
\end_inset

 which represents the actual Euler integration of the Newtonian equations
 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:newton"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
<s'_{1},...,s'_{n}>=I(<s{}_{1},...,s{}_{n}>)\label{eq:iteration}
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
Since 
\begin_inset Formula $s'_{i}$
\end_inset

 does not depend on any other 
\begin_inset Formula $s'_{j}$
\end_inset

 it is evident that all components of 
\begin_inset Formula $s'$
\end_inset

 can be calculated in parallel.
 The will reduce the computation time for 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:iteration"

\end_inset

 by a factor of 
\begin_inset Formula $\nicefrac{1}{P}$
\end_inset

 with 
\begin_inset Formula $P$
\end_inset

 for the number processes.
 On the other hand coordinating the iteration it self requires some processing
 overhead 
\begin_inset Formula $\gamma$
\end_inset

 which can be assumed to be proportional to the .
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
T(N)=\frac{1}{P}(\alpha N^{2}+\beta N)+P\gamma\label{eq:perform-1}
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
Measurements are showing different behaviour (see Figure
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:meas1"

\end_inset

).
 Upto a certain number of particles the execution time seems more or less
 constant.
\end_layout

\begin_layout Section
The Test framework
\end_layout

\begin_layout Standard
The basic objective of the framework is to provide an algorithm based on
 the formula 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:iteration"

\end_inset

 and to study the influence of work partitioning and process synchronization
 on the total execution time.
 At the same time the test framework serves as an prototype for a new version
 of the PSim project.
\end_layout

\begin_layout Standard
Typically the application developer will have to implement the calculation
 of an individual element of the state vector by extended the Abstract_Vector_Pr
ocessor type.
 At a minimum he needs to provide the methods Process_Element and Collect.
 
\end_layout

\begin_layout Standard
Process_Element is expected to contain the calculation according to 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:iteration"

\end_inset

 it returns false all vector components 
\begin_inset Formula $s_{i}$
\end_inset

 have been processed.
 It is task of the Process_Element to select the items to be processed next
 when called.
 The framework will call this method until it returns false.
\end_layout

\begin_layout Standard
The method Collect is called by the framework after all worker tasks have
 finished processing elements in order to allow the application developer
 any type on post processing on the result vector before it is feed into
 the iteration again.
\end_layout

\begin_layout Standard
Upon instantiation of the Abstract_Vector_Processor instatiation, a given
 number of worker processes are started.
 A worker task will register with the synchronisation object and will call
 the method Wait_For_Data_Ready.
 Since no data has been provided yet, the call will block.
 If the a task of the application environment is calling the method Execute
 of the Abstract_Vector_Processor the waiting worker tasks will wake up
 start processing the state vector in parallel.
 Each worker task repeats calling the methods Process_Element until the
 method returns false which indicate that no more elements of the state
 vector have to be processed.
 When all work is done the worker task calls the method Wait_For_Data_Ready
 from the Abstract_Sync object to inducate the he is ready to process new
 data.
 
\end_layout

\begin_layout Standard
The synchronisation object is an implementation of the abstract type Abstract_Sy
nc and it inteded to encapsulate all plattform specifica of the coordination
 between main task and worker tasks.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename Abstract_Processor.png
	scale 65

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
This Figure a shows the package and type hierarchy of the test framework.
 The user of the frame work has to provide two implementations.
 The actual iteration on the state vector and the synchronization object.
 
\begin_inset CommandInset label
LatexCommand label
name "fig:psim"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Work partitioning
\end_layout

\begin_layout Standard
The work in terms of vector elements has to be split up between the worker
 tasks.
 I have tested two different methods of partitioning:
\end_layout

\begin_layout Itemize
Partitioned - Each worker task works on a specific range of particles which
 has to be computed completly to finish hte iteration.
\end_layout

\begin_layout Itemize
Scattered - Each worker task fetches from a pool the next vector element
 to be processed.
 Technically this is done by a counter which is shared among all worker
 processes.
 Each time a worker fetches a new particle for processing the worker increments
 this counter and interpretes the result as the next particle to be selected.
 
\end_layout

\begin_layout Standard
The result is shown in figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:meas1"

\end_inset

.
 The figure shows for a given synchronization implementation the execution
 time depending on the number of particles involved in the simulation for
 both work split mechanisms.
 The execution of the partitioned algorithm is systematically higher then
 the scattered selection if no special precautions are taken.
 The reason seems to be the scheduling behavior of Linux.
 In case of the scattered mode the average time until the next item is selected
 is shorter then the preemption timer.
 In the case of partitioning the computation of a partition may be preempted
 before the worker task has finished by the scheduler.
 This effect delays the completion of the iteration for all worker processes
 and hence increasing the iteration time.
 In order to mitigate this issue all processes which could interfere with
 the worker processes are moved by means of a script to processor 0 and
 the worker threads are assigned to the remaining CPUs; which means in turn
 that the number of worker processes is 1 less then the number of available
 CPU's.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename /home/merdmann/workspace/threads1.X/psim/doc/quad.png
	scale 60

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
This diagram shows the execution time vs.
 the number of particles for different work splits among the worker processes
 and different CPU assignments.
 In addition it shows the performance of a non parallel implementation (gray
 line) and the best possible execution time assuming 7 worker processes.
 Scattered/Partitioned denotes the work split with the same meaning as in
 the text.
 CPU0 denotes the measurements which have been taken using a fix CPU binding
 as described above.
 
\begin_inset CommandInset label
LatexCommand label
name "fig:meas1"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Process Synchronization
\end_layout

\begin_layout Standard
Process synchronization is involved in each iteration of 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:iteration"

\end_inset

 because the main iteration loop is running in the main task and the iteration
 is done by theworker task and the main task waits for the completion of
 the iteration.
 The iteration is complete if all worker task have completed there work.
 As shown in 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:psim"

\end_inset

 the framework provides an abstract class Abstract_Sync which implements
 a barrier based on the abstract methods wakeup and sleep.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename Abstract_Processor_sync.png

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
This figure shows the inter working between the main task which actually
 calls the calculate procedure to execute the iteration process for n times.
 The diagram above describes the sequence of interactions for one iteration.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Several different process synchronization methods have been tested as an
 implementation of of the abstract methods wakeup and sleep.
\end_layout

\begin_layout Itemize
Suspension Objects
\end_layout

\begin_layout Itemize
Protected Types
\end_layout

\begin_layout Standard
In the following we will discuss shortly the results and with respect to
 testability and latency time.
 The code fragments shown in the following are some what simplified to show
 only the important implementation details.
 We will use the implementation using suspension objects to explain some
 of the inner workings of the abstract process synchronization package.
 
\end_layout

\begin_layout Standard
During start up all worker threads are registering with the synchronization
 object with a so called client id.
 If the main threads indicates that all data has been provided to perform
 an iteration the method Indicate_Input_Available the synchronization object
 will wakeup all worker threads using the provided wakeup method and will
 wait for the completion of all worker threads until it returns to the caller
 in the main thread.
 
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

procedure Wakeup( This : in out Object_Type; Id : in Client_Id_Type ) is
\end_layout

\begin_layout Plain Layout

	Data : Object_Data_Access renames This.Data;
\end_layout

\begin_layout Plain Layout

begin  
\end_layout

\begin_layout Plain Layout

	Set_True( Data.S(Id) );    
\end_layout

\begin_layout Plain Layout

end Wakeup;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

procedure Sleep( This : in out Object_Type; Id : in Client_Id_Type ) is
\end_layout

\begin_layout Plain Layout

	Data : Object_Data_Access renames This.Data;
\end_layout

\begin_layout Plain Layout

begin
\end_layout

\begin_layout Plain Layout

	Suspend_Until_True( Data.S(Id) );          
\end_layout

\begin_layout Plain Layout

    Set_False( Data.S(Id) );        
\end_layout

\begin_layout Plain Layout

end Sleep; 
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Process synchronization using the Suspension Objects from Ada95.
 
\begin_inset CommandInset label
LatexCommand label
name "alg:Suspension"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The details of Set:True and Suspend_Until_True are hidden in the Ada 95
 standard library.
 Protected types and barriers can be used to implements the same functionality
 as shown in algorithm
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:Suspension"

\end_inset

 is a rather straight forward way.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

protected body Sleep_Type is
\end_layout

\begin_layout Plain Layout

	entry Sleep when Ready is
\end_layout

\begin_layout Plain Layout

	begin
\end_layout

\begin_layout Plain Layout

         Ready := False;       
\end_layout

\begin_layout Plain Layout

	end Sleep;
\end_layout

\begin_layout Plain Layout

      
\end_layout

\begin_layout Plain Layout

	procedure Wakeup is       
\end_layout

\begin_layout Plain Layout

	begin
\end_layout

\begin_layout Plain Layout

         Ready := True;
\end_layout

\begin_layout Plain Layout

    end Wakeup;
\end_layout

\begin_layout Plain Layout

end Sleep_Type;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

type Object_Data_Type( Max_Worker : Client_Id_Type ) is record
\end_layout

\begin_layout Plain Layout

		S : Sleep_Array( 0..Max_Worker ) ;    
\end_layout

\begin_layout Plain Layout

	end record; 
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

procedure Wakeup( This : in out Object_Type; Id : in Client_Id_Type ) is
\end_layout

\begin_layout Plain Layout

	Data    : Object_Data_Access renames This.Data;    
\end_layout

\begin_layout Plain Layout

begin
\end_layout

\begin_layout Plain Layout

	Data.S(Id).Wakeup;
\end_layout

\begin_layout Plain Layout

end Wakeup;
\end_layout

\begin_layout Plain Layout

     
\end_layout

\begin_layout Plain Layout

procedure Sleep( This : in out Object_Type; Id : in Client_Id_Type ) is
\end_layout

\begin_layout Plain Layout

	Data    : Object_Data_Access renames This.Data;
\end_layout

\begin_layout Plain Layout

begin 
\end_layout

\begin_layout Plain Layout

	Data.S(Id).Sleep;     
\end_layout

\begin_layout Plain Layout

end Sleep; 
\end_layout

\end_inset


\begin_inset Caption

\begin_layout Plain Layout
Protected 
\begin_inset CommandInset label
LatexCommand label
name "alg:sync_protected"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:snycratio"

\end_inset

shows the ratio of the execution time for different numbers of particles.
 For larger numbers the ratio is 1 which means neither algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:sync_protected"

\end_inset

 nor algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:Suspension"

\end_inset

is better to use from the performance perspective.
 Other selection criteria like maintenance effort and portability are out
 of scope here.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename /home/merdmann/workspace/threads1.X/psim/doc/syncratio.png
	scale 70

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
This diagram shows the ratio of the execution times using the suspension
 objects and protected types as synchronization mechanisms for increasing
 numbers of particles.
 For larger numbers there is virtually no difference in using either one.
\begin_inset CommandInset label
LatexCommand label
name "fig:snycratio"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Optimization to the Integration algorithm
\end_layout

\begin_layout Standard
Even thought this partitioning of the computational work is technically
 quite easy to achieve the actual yield in performance depends only linear
 on the number of parallel processes.
 The most reasonable target for palatalization is the quadratic term.
 The force 
\begin_inset Formula $F_{i}$
\end_inset

 acting on a particle i is the sum of the force caused by all other particles
 
\begin_inset Formula $F_{ij}$
\end_inset

 where 
\begin_inset Formula $i\in[1..N]$
\end_inset

 and 
\begin_inset Formula $i\neq j$
\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
F_{1}=0+F_{12}+F_{13}+F_{14}+.............+F_{1N}
\]

\end_inset


\begin_inset Formula 
\[
F_{2}=F_{21}+0+F_{23}+F_{24}+.............+F_{2N}
\]

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
F_{3}=F_{31}+F_{32}+0+F_{34}+.............+F_{3N}
\]

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
F_{4}=F_{41}+F_{42}+F_{43}+0+.............+F_{4N}
\]

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
............................
\]

\end_inset


\begin_inset Formula 
\[
F_{N}=F_{N1}+F_{N2}+F_{N3}+F_{N4}+.............+0
\]

\end_inset


\end_layout

\begin_layout Standard
Considering 
\begin_inset Formula $F_{ij}=-F_{ji}$
\end_inset

 and 
\begin_inset Formula $F_{ii}=0$
\end_inset

 it becomes obvious from the schema above that while calculating the value
 of 
\begin_inset Formula $F_{1}$
\end_inset

 the first term of the sum for 
\begin_inset Formula $F_{i}$
\end_inset

 where 
\begin_inset Formula $i>1$
\end_inset

 are as well calculated.
 More generally speaking; while calculating the terms for 
\begin_inset Formula $F_{i}$
\end_inset

 terms for all 
\begin_inset Formula $F_{j}$
\end_inset

 where 
\begin_inset Formula $j>i$
\end_inset

 are calculated as well.
 This observation motivates the following algorithm to calculate the forces
 
\begin_inset Formula $F_{i}$
\end_inset

 for all particles 
\begin_inset Formula $i\in1..N$
\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

for i in 1..N loop
\end_layout

\begin_layout Plain Layout

   F(I) := 0.0;
\end_layout

\begin_layout Plain Layout

   for j in i+1..N loop
\end_layout

\begin_layout Plain Layout

        F(i) := F(i) + F(i,j);
\end_layout

\begin_layout Plain Layout

        F(j) := F(j) - F(i,j);
\end_layout

\begin_layout Plain Layout

   end loop
\end_layout

\begin_layout Plain Layout

done
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Using 
\begin_inset Formula $F_{ij}=-F_{ji}$
\end_inset

the calculation of the forces (see
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:forces"

\end_inset

) where the computational time depends on 
\begin_inset Formula $N^{2}$
\end_inset

can be simplified to an algorithm where the computation time depends on
 
\begin_inset Formula $(N^{2}-N)/2$
\end_inset

.
\begin_inset CommandInset label
LatexCommand label
name "alg:forces_opt"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:forces_opt"

\end_inset

 requires the following number of computation steps: 
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
M=(N-1)+(N-2)+(N-3)......+N=N^{2}-1-2-3...
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
using the Gaussian formula this yields:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
M=\sum_{k=1}^{N}(N-k)=N^{2}-\sum_{k=1}^{N}k=N^{2}-N\,(N+1)/2=N^{2}-\frac{N^{2}}{2}-N/2=\frac{N^{2}-N}{2}
\]

\end_inset


\end_layout

\begin_layout Standard

\series bold
to be complete with measurement results .....
\end_layout

\begin_layout Section
Comparison with other Frameworks
\end_layout

\begin_layout Section
Conclusion
\end_layout

\begin_layout Standard
Since figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:meas1"

\end_inset

shows that the execution time comes for large numbers quite near to the
 theoretical limit of the algorithm it makes for time being no sense to
 invest more efforts in tuning the synchronization mechanisms.
 For small numbers of particles the no parallel implementation should be
 used since it yields faster results then the parallel implementation of
 this algorithm.
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "1"

\end_inset

As an example; Reiner Oloff, Geometrie der Raumzeit, Vieweg, ISBN 3-528-26917-0
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "2"

\end_inset


\emph on
Ta-Pei Chend, Relativity, Gravitation and Cosmology; Oxford Master Series,
 ISBN 0-19-852957-0
\emph default
.
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "3-2"

\end_inset

American Mathematical Society, 
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "3"

\end_inset

American Mathematical Society, 
\end_layout

\end_body
\end_document
